"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Token = require("token-types");
var FourCC_1 = require("../common/FourCC");
var _debug = require("debug");
var debug = _debug("music-metadata:parser:MP4:atom");
/**
 * Interface for the parsed Media Atom
 * https://wiki.multimedia.cx/index.php/QuickTime_container
 */
var Atom = /** @class */ (function () {
    function Atom() {
    }
    Atom.Header = {
        len: 8,
        get: function (buf, off) {
            var length = Token.UINT32_BE.get(buf, 0);
            if (length < 0)
                throw new Error("Invalid atom header length");
            return {
                length: length,
                name: FourCC_1.FourCcToken.get(buf, off + 4)
            };
        }
    };
    Atom.ftyp = {
        len: 4,
        get: function (buf, off) {
            return {
                type: new Token.StringType(4, "ascii").get(buf, off)
            };
        }
    };
    /**
     * Token: Movie Header Atom
     */
    Atom.mhdr = {
        len: 8,
        get: function (buf, off) {
            return {
                version: Token.UINT8.get(buf, off + 0),
                flags: Token.UINT24_BE.get(buf, off + 1),
                nextItemID: Token.UINT32_BE.get(buf, off + 4)
            };
        }
    };
    return Atom;
}());
exports.Atom = Atom;
/**
 * Base class for 'fixed' length atoms.
 * In some cases these atoms are longer then the sum of the described fields.
 * Issue: https://github.com/Borewit/music-metadata/issues/120
 */
var FixedLengthAtom = /** @class */ (function () {
    /**
     *
     * @param {number} len Length as specified in the size field
     * @param {number} expLen Total length of sum of specified fields in the standard
     */
    function FixedLengthAtom(len, expLen, atomId) {
        this.len = len;
        if (len < expLen) {
            throw new Error("Atom " + atomId + " expected to be " + expLen + ", but specifies " + len + " bytes long.");
        }
        else if (len > expLen) {
            debug("Warning: atom " + atomId + " expected to be " + expLen + ", but was actually " + len + " bytes long.");
        }
    }
    return FixedLengthAtom;
}());
/**
 * Token: Media Header Atom
 * Ref:
 *   https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-SW34
 *   https://wiki.multimedia.cx/index.php/QuickTime_container#mdhd
 */
var MdhdAtom = /** @class */ (function (_super) {
    __extends(MdhdAtom, _super);
    function MdhdAtom(len) {
        var _this = _super.call(this, len, 24, 'mdhd') || this;
        _this.len = len;
        return _this;
    }
    MdhdAtom.prototype.get = function (buf, off) {
        return {
            version: Token.UINT8.get(buf, off + 0),
            flags: Token.UINT24_BE.get(buf, off + 1),
            creationTime: Token.UINT32_BE.get(buf, off + 4),
            modificationTime: Token.UINT32_BE.get(buf, off + 8),
            timeScale: Token.UINT32_BE.get(buf, off + 12),
            duration: Token.UINT32_BE.get(buf, off + 16),
            language: Token.UINT16_BE.get(buf, off + 20),
            quality: Token.UINT16_BE.get(buf, off + 22)
        };
    };
    return MdhdAtom;
}(FixedLengthAtom));
exports.MdhdAtom = MdhdAtom;
/**
 * Token: Movie Header Atom
 */
var MvhdAtom = /** @class */ (function (_super) {
    __extends(MvhdAtom, _super);
    function MvhdAtom(len) {
        var _this = _super.call(this, len, 100, 'mvhd') || this;
        _this.len = len;
        return _this;
    }
    MvhdAtom.prototype.get = function (buf, off) {
        return {
            version: Token.UINT8.get(buf, off + 0),
            flags: Token.UINT24_BE.get(buf, off + 1),
            creationTime: Token.UINT32_BE.get(buf, off + 4),
            modificationTime: Token.UINT32_BE.get(buf, off + 8),
            timeScale: Token.UINT32_BE.get(buf, off + 12),
            duration: Token.UINT32_BE.get(buf, off + 16),
            preferredRate: Token.UINT32_BE.get(buf, off + 20),
            preferredVolume: Token.UINT16_BE.get(buf, off + 24),
            // ignore reserver: 10 bytes
            // ignore matrix structure: 36 bytes
            previewTime: Token.UINT32_BE.get(buf, off + 72),
            previewDuration: Token.UINT32_BE.get(buf, off + 76),
            posterTime: Token.UINT32_BE.get(buf, off + 80),
            selectionTime: Token.UINT32_BE.get(buf, off + 84),
            selectionDuration: Token.UINT32_BE.get(buf, off + 88),
            currentTime: Token.UINT32_BE.get(buf, off + 92),
            nextTrackID: Token.UINT32_BE.get(buf, off + 96)
        };
    };
    return MvhdAtom;
}(FixedLengthAtom));
exports.MvhdAtom = MvhdAtom;
/**
 * Data Atom Structure
 */
var DataAtom = /** @class */ (function () {
    function DataAtom(len) {
        this.len = len;
    }
    DataAtom.prototype.get = function (buf, off) {
        return {
            type: {
                set: Token.UINT8.get(buf, off + 0),
                type: Token.UINT24_BE.get(buf, off + 1)
            },
            locale: Token.UINT24_BE.get(buf, off + 4),
            value: new Token.BufferType(this.len - 8).get(buf, off + 8)
        };
    };
    return DataAtom;
}());
exports.DataAtom = DataAtom;
/**
 * Data Atom Structure
 * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW31
 */
var NameAtom = /** @class */ (function () {
    function NameAtom(len) {
        this.len = len;
    }
    NameAtom.prototype.get = function (buf, off) {
        return {
            version: Token.UINT8.get(buf, off),
            flags: Token.UINT24_BE.get(buf, off + 1),
            name: new Token.StringType(this.len - 4, "utf-8").get(buf, off + 4)
        };
    };
    return NameAtom;
}());
exports.NameAtom = NameAtom;
/**
 * Track Header Atoms structure
 * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25550
 */
var TrackHeaderAtom = /** @class */ (function () {
    function TrackHeaderAtom(len) {
        this.len = len;
    }
    TrackHeaderAtom.prototype.get = function (buf, off) {
        return {
            version: Token.UINT8.get(buf, off),
            flags: Token.UINT24_BE.get(buf, off + 1),
            creationTime: Token.UINT32_BE.get(buf, off + 4),
            modificationTime: Token.UINT32_BE.get(buf, off + 8),
            trackId: Token.UINT32_BE.get(buf, off + 12),
            // reserved 4 bytes
            duration: Token.UINT32_BE.get(buf, off + 20),
            layer: Token.UINT16_BE.get(buf, off + 24),
            alternateGroup: Token.UINT16_BE.get(buf, off + 26),
            volume: Token.UINT16_BE.get(buf, off + 28) // ToDo: fixed point
            // ToDo: add remaining fields
        };
    };
    return TrackHeaderAtom;
}());
exports.TrackHeaderAtom = TrackHeaderAtom;
